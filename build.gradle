// vim: set ft=groovy:
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// *              C E D A R
// *          S O L U T I O N S       "Software done right."
// *           S O F T W A R E
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Copyright (c) 2011-2013 Kenneth J. Pronovici.
// * All rights reserved.
// *
// * This program is free software; you can redistribute it and/or
// * modify it under the terms of the Apache License, Version 2.0.
// * See LICENSE for more information about the licensing terms.
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *
// * Author   : Kenneth J. Pronovici <pronovic@ieee.org>
// * Language : Gradle (>= 1.7)
// * Project  : Common Dependencies
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
// http://stackoverflow.com/questions/1163173/why-use-gradle-instead-of-ant-or-maven

// ***************
// * Gradle setup
// ***************

// Sources for the build script itself
buildscript {
   repositories {
      mavenCentral()
   }

   dependencies {
      classpath "com.admc:gradle-javaPropFile-plugin:latest.integration"
   }
} 

// Plugins
apply plugin: "base"
apply plugin: "eclipse"
apply plugin: "javaPropFile"

// Imports
import groovy.swing.SwingBuilder
import javax.swing.JFrame

// This loads configuration from app.properties and overrides with local.properties
// See: https://github.com/unsaved/gradle-javaPropFile-plugin/tree/master/doc#void-propfileloadertraditionalpropertiesinit
propFileLoader.traditionalPropertiesInit()  


// ************************
// * Project configuration
// ************************

// Common setup for subprojects
subprojects {
   apply plugin: "java"
   apply plugin: "maven"
   apply plugin: "signing"

   group = "com.googlecode.cedar-common"
   buildDir = "../build/${project.name}"
   
   uploadArchives {
       repositories {
           mavenDeployer {
               repository(url: config_mavenPublishRepositoryUrl)
               beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) } 
           }
       }
   }

   install { 
   }

   artifacts {
      jar
   }

   signing {
      required = { gradle.taskGraph.hasTask(":${project.name}:uploadArchives") }
      sign jar
   }

   task publish(dependsOn: uploadArchives)

   // "generate" the library jar by copying what's checked into revision control
   task libraryJar(type: Copy) {
      outputs.upToDateWhen { false }
      from(".")
      into(file(buildDir.canonicalPath + "/libs").canonicalPath)
      include("${project.name}-${version}.jar")
   }

   // this tricks gradle into generating the jar by executing libraryJar
   tasks.jar.dependsOn(libraryJar)
   jar.enabled = false

   // force the signJar task to run every time, even if it thinks it's up-to-date
   tasks.matching { task -> task.name == "signJar" }.all {
      outputs.upToDateWhen { false }
   }

}

// Subproject for gwt-sl dependency
project(":gwt-sl") {

   version = "1.2"

   uploadArchives {
       repositories {
           mavenDeployer {
               pom.artifactId = "${project.name}"
               pom.version = "${version}"
               pom.project {
                  name "GWT Server Library (Repackaged)"
                  description "*** THIS IS AN OBSOLETE VERSION UPLOADED FOR USE WITH CEDAR-COMMON.*** " +
                              "The Server Library for GWT is a collection of Java server " +
                              "side components for the Google Web Toolkit AJAX framework " +
                              "with the focus on the Spring framework by facilitating " + 
                              "publishing of Spring beans as RPC services with support " +
                              "for Hibernate-managed entities."
                  url "https://code.google.com/p/gwt-sl/"
                  scm {
                     url "scm:https://code.google.com/p/cedar-common.dependencies/"
                     connection "scm:hg:https://code.google.com/p/cedar-common.dependencies/"
                     developerConnection "scm:hg:https://code.google.com/p/cedar-common.dependencies/"
                  }
                  licenses {
                     license {
                        name "The Apache Software License, Version 2.0"
                        url "http://www.apache.org/license/LICENSE-2.0.txt"
                        distribution "repo"
                     }
                  }
                  developers {
                     developer {
                        id "author"
                        name "George Georgovassilis"
                        email "g.georgovassilis@gmail.com"
                     }
                  }
               }
           }
       }
   }

}

// Subproject for cpsuite dependency
project(":cpsuite") {

   version = "1.2.6"

   // this tricks gradle into generating the jar by executing libraryJar
   tasks.jar.dependsOn(libraryJar)
   jar.enabled = false

   uploadArchives {
       repositories {
           mavenDeployer {
               pom.artifactId = "${project.name}"
               pom.version = "${version}"
               pom.project {
                  name "Classpath Suite (Repackaged)"
                  description "*** THIS VERSION UPLOADED FOR USE WITH CEDAR-COMMON.*** " +
                              "Dynamically generates JUnit4 test suites."
                  url "http://johanneslink.net/projects/cpsuite.jsp"
                  scm {
                     url "scm:https://code.google.com/p/cedar-common.dependencies/"
                     connection "scm:hg:https://code.google.com/p/cedar-common.dependencies/"
                     developerConnection "scm:hg:https://code.google.com/p/cedar-common.dependencies/"
                  }
                  licenses {
                     license {
                        name "The Apache Software License, Version 2.0"
                        url "http://www.apache.org/license/LICENSE-2.0.txt"
                        distribution "repo"
                     }
                  }
                  developers {
                     developer {
                        id "author"
                        name "Johannes Link"
                        email "business@johanneslink.net"
                     }
                  }
               }
           }
       }
   }

}


// *********************
// * Digital signatures
// *********************

// Set all of the signature configuration, for all projects
def setSignatureConfiguration(passphrase) {
   allprojects { ext."signing.keyId" = config_gpgKeyId }
   allprojects { ext."signing.secretKeyRingFile" = config_gpgSecretKey }
   allprojects { ext."signing.password" = passphrase }
}

// Get the GPG passphrase from the user when it's needed 
gradle.taskGraph.whenReady { taskGraph ->
   if (taskGraph.allTasks.any { it instanceof Sign && it.required }) {
      Console console = System.console()
      if (console != null) {
         getInputViaConsole("Enter passphrase for GPG key ${config_gpgKeyId}:", true, { input -> setSignatureConfiguration(input) })
      } else {
         getInputViaPopup("GPG Key ${config_gpgKeyId}", "Enter passphrase:", true, { input -> setSignatureConfiguration(input) })
      }
   }
}

// Get input from a user via the system console, executing a closure with the result
def getInputViaConsole(label, secure, action) {
   Console console = System.console()
   if (secure) {
      def value = console.readPassword("\n\n" + label + " ")
      action(value)
   } else {
      def value = console.readLine("\n\n" + label + " ")
      action(value)
   }
}

// Get password input from a user, executing a closure with the result
def getInputViaPopup(title, label, secure, action) {
   boolean alive = true

   def swing = new SwingBuilder()
   def button = swing.button("Ok")
   def prefix = swing.label(label)
   def value = null

   def frame = swing.frame(title: title, defaultCloseOperation: JFrame.EXIT_ON_CLOSE) {
      panel {
         widget(prefix)
         if (secure) {
            value = passwordField(columns:18)
         } else {
            value = textField(columns:18)
         }
         widget(button)
      }
   }

   frame.setLocationRelativeTo(null)

   button.actionPerformed = {
      action(value.text)
      alive = false
   }

   value.actionPerformed = {
      action(value.text)
      alive = false
   }

   frame.pack()
   frame.show()

   while (alive) {
      sleep(1000)
   }

   frame.hide()
}


// ************************
// * Eclipse configuration
// ************************
// The eclipse plugin is used to generate Eclipse project files

// Hide the various derived directories from Eclipse
project.eclipse.project.file.withXml { provider ->
   ignoreResourcesFromDirectories(provider, ["build", ])
} 

// Ignore resources in a specific directory
// See: http://forums.gradle.org/gradle/topics/eclipse_generated_files_should_be_put_in_the_same_place_as_the_gradle_generated_files
def ignoreResourcesFromDirectories(provider, directories) {
   def filter = provider.asNode().appendNode("filteredResources").appendNode("filter")
   filter.appendNode("id", String.valueOf(System.currentTimeMillis()))  // this id must be unique
   filter.appendNode("name")
   filter.appendNode("type", "26")
   def matcher = filter.appendNode("matcher")
   matcher.appendNode("id", "org.eclipse.ui.ide.orFilterMatcher")
   def arguments = matcher.appendNode("arguments")
   directories.each {
      def dirMatcher = arguments.appendNode("matcher")
      dirMatcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
      dirMatcher.appendNode("arguments", "1.0-projectRelativePath-matches-true-false-${it}")
   }
} 

